import { Component, OnInit, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from '../../core/services/auth.service';
import { MentorService } from '../../core/services/mentor.service';
import { Mentor } from '../../shared/models/interfaces/mentor.interface';
import { SearchableDropdownComponent } from '../../shared/components/searchable-dropdown/searchable-dropdown.component';
import { EXPERTISE_OPTIONS, SKILLS_OPTIONS, SPECIALIZATIONS_OPTIONS, LANGUAGES_OPTIONS, MENTORSHIP_STYLE_OPTIONS } from '../../shared/data/mentor-options';
import { finalize } from 'rxjs/operators';

export interface Skill {
  id: string;
  name: string;
  category: string;
}

export interface ExpertiseField {
  id: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, SearchableDropdownComponent],
  templateUrl: './profile.component.html',
  styleUrl: './profile.component.scss'
})
export class ProfileComponent implements OnInit {
  private authService = inject(AuthService);
  private mentorService = inject(MentorService);
  private fb = inject(FormBuilder);

  // Current user and mentor data
  currentUser: any = null;
  mentorData: Mentor | null = null;
  isLoading = signal(true);
  isSaving = signal(false);
  
  // Tab management
  currentTab = signal(0);
  
  // Tab configuration similar to mentor setup
  tabs = [
    { title: 'Basic Info', key: 'basic' },
    { title: 'Experience', key: 'experience' },
    { title: 'Achievements', key: 'achievements' },
    { title: 'Certifications', key: 'certifications' },
    { title: 'Availability', key: 'availability' }
  ];

  // Forms for each tab
  basicInfoForm!: FormGroup;
  experienceForm!: FormGroup;
  achievementsForm!: FormGroup;
  certificationsForm!: FormGroup;
  availabilityForm!: FormGroup;
  
  // Options for dropdowns
  expertiseOptions = EXPERTISE_OPTIONS;
  skillsOptions = SKILLS_OPTIONS;
  specializationsOptions = SPECIALIZATIONS_OPTIONS;
  languagesOptions = LANGUAGES_OPTIONS;
  mentorshipStyleOptions = MENTORSHIP_STYLE_OPTIONS;

  // File upload properties
  profilePicturePreview: string | null = null;
  selectedFile: File | null = null;

  // Available options for mentors
  availableSkills: Skill[] = [
    { id: 'js', name: 'JavaScript', category: 'Programming' },
    { id: 'python', name: 'Python', category: 'Programming' },
    { id: 'java', name: 'Java', category: 'Programming' },
    { id: 'react', name: 'React', category: 'Frontend' },
    { id: 'angular', name: 'Angular', category: 'Frontend' },
    { id: 'nodejs', name: 'Node.js', category: 'Backend' },
    { id: 'design', name: 'UI/UX Design', category: 'Design' },
    { id: 'data-analysis', name: 'Data Analysis', category: 'Data Science' },
    { id: 'machine-learning', name: 'Machine Learning', category: 'AI/ML' },
    { id: 'project-management', name: 'Project Management', category: 'Management' },
    { id: 'communication', name: 'Communication', category: 'Soft Skills' },
    { id: 'leadership', name: 'Leadership', category: 'Soft Skills' }
  ];

  availableExpertiseFields: ExpertiseField[] = [
    { id: 'web-dev', name: 'Web Development', description: 'Frontend at Backend Development' },
    { id: 'mobile-dev', name: 'Mobile Development', description: 'iOS at Android App Development' },
    { id: 'data-science', name: 'Data Science', description: 'Data Analysis, Visualization, at Machine Learning' },
    { id: 'cybersecurity', name: 'Cybersecurity', description: 'Information Security at Ethical Hacking' },
    { id: 'ui-ux', name: 'UI/UX Design', description: 'User Interface at User Experience Design' },
    { id: 'game-dev', name: 'Game Development', description: 'Video Game Programming at Design' },
    { id: 'devops', name: 'DevOps', description: 'Development Operations at Cloud Computing' },
    { id: 'ai-ml', name: 'Artificial Intelligence', description: 'AI Research at Machine Learning' },
    { id: 'business', name: 'Business Development', description: 'Entrepreneurship at Business Strategy' },
    { id: 'marketing', name: 'Digital Marketing', description: 'Social Media at Content Marketing' }
  ];

  // Available options for both
  availableInterests: string[] = [
    'Web Development', 'Mobile Development', 'Data Science', 'AI/ML', 'Cybersecurity',
    'UI/UX Design', 'Game Development', 'Digital Marketing', 'Business', 'Entrepreneurship',
    'Research', 'Teaching', 'Writing', 'Photography', 'Music', 'Art'
  ];

  availableHobbies: string[] = [
    'Coding', 'Reading', 'Gaming', 'Sports', 'Music', 'Art', 'Photography', 'Travel',
    'Cooking', 'Gardening', 'Movies', 'Anime', 'Fitness', 'Dancing', 'Writing', 'Blogging'
  ];

  ngOnInit() {
    this.loadUserData();
    this.initializeForms();
  }

  loadUserData() {
    this.isLoading.set(true);
    
    this.authService.user$.subscribe(user => {
      if (user) {
        this.currentUser = user;
        
        // If user is a mentor, load mentor profile from Firestore
        if (user.role === 'mentor') {
          this.mentorService.getMentorProfile(user.uid).pipe(
            finalize(() => this.isLoading.set(false))
          ).subscribe({
            next: (mentorData) => {
              this.mentorData = mentorData;
              this.populateFormsWithData();
            },
            error: (error) => {
              console.error('Error loading mentor profile:', error);
            }
          });
        } else {
          this.isLoading.set(false);
        }
      }
    });
  }

  initializeForms() {
    // Basic Info Form
    this.basicInfoForm = this.fb.group({
      location: [''],
      about: [''],
      expertise: this.fb.array([]),
      skills: this.fb.array([]),
      specializations: this.fb.array([]),
      languages: this.fb.array([]),
      mentorshipStyle: this.fb.array([]),
      connect: this.fb.array([])
    });

    // Experience Form
    this.experienceForm = this.fb.group({
      education: this.fb.array([]),
      workExperience: this.fb.array([])
    });

    // Achievements Form
    this.achievementsForm = this.fb.group({
      achievements: this.fb.array([])
    });

    // Certifications Form
    this.certificationsForm = this.fb.group({
      certifications: this.fb.array([])
    });

    // Availability Form
    this.availabilityForm = this.fb.group({
      timeZone: [''],
      sessionTypes: this.fb.array([]),
      availableTimeSlots: this.fb.array([])
    });
  }

  populateFormsWithData() {
    if (!this.mentorData) return;

    // Populate basic info
    this.basicInfoForm.patchValue({
      location: this.mentorData.location || '',
      about: this.mentorData.overview?.about || ''
    });

    // Populate arrays
    this.populateFormArray('expertise', this.mentorData.overview?.expertise || []);
    this.populateFormArray('skills', this.mentorData.overview?.skills || []);
    this.populateFormArray('specializations', this.mentorData.overview?.specializations || []);
    this.populateFormArray('languages', this.mentorData.overview?.languages || []);
    this.populateFormArray('mentorshipStyle', this.mentorData.overview?.mentorshipStyle || []);

    // Populate experience arrays
    this.populateEducationArray(this.mentorData.experience?.education || []);
    this.populateWorkExperienceArray(this.mentorData.experience?.workExperience || []);
    
    // Populate achievements and certifications
    this.populateAchievementsArray(this.mentorData.experience?.achievements || []);
    this.populateCertificationsArray(this.mentorData.experience?.certifications || []);

    // Populate availability
    if (this.mentorData.availability) {
      this.availabilityForm.patchValue({
        timeZone: this.mentorData.availability.timeZone || ''
      });
      this.populateTimeSlots(this.mentorData.availability.availableTimeSlots || []);
    }

    // Set profile picture preview
    this.profilePicturePreview = this.mentorData.profilePicture || null;
  }

  populateFormArray(controlName: string, data: string[]) {
    const formArray = this.basicInfoForm.get(controlName) as FormArray;
    formArray.clear();
    data.forEach(item => {
      formArray.push(this.fb.control(item));
    });
  }

  populateEducationArray(education: any[]) {
    const educationArray = this.experienceForm.get('education') as FormArray;
    educationArray.clear();
    education.forEach(edu => {
      educationArray.push(this.fb.group({
        degree: [edu.degree || ''],
        institution: [edu.institution || ''],
        startDate: [edu.startDate || ''],
        endDate: [edu.endDate || ''],
        description: [edu.description || '']
      }));
    });
  }

  populateWorkExperienceArray(workExperience: any[]) {
    const workArray = this.experienceForm.get('workExperience') as FormArray;
    workArray.clear();
    workExperience.forEach(work => {
      workArray.push(this.fb.group({
        jobTitle: [work.jobTitle || ''],
        company: [work.company || ''],
        startDate: [work.startDate || ''],
        endDate: [work.endDate || ''],
        description: [work.description || '']
      }));
    });
  }

  populateAchievementsArray(achievements: any[]) {
    const achievementsArray = this.achievementsForm.get('achievements') as FormArray;
    achievementsArray.clear();
    achievements.forEach(achievement => {
      achievementsArray.push(this.fb.group({
        title: [achievement.title || ''],
        description: [achievement.description || ''],
        date: [achievement.date || '']
      }));
    });
  }

  populateCertificationsArray(certifications: any[]) {
    const certificationsArray = this.certificationsForm.get('certifications') as FormArray;
    certificationsArray.clear();
    certifications.forEach(cert => {
      certificationsArray.push(this.fb.group({
        title: [cert.title || ''],
        institution: [cert.institution || ''],
        issuedDate: [cert.issuedDate || ''],
        expirationDate: [cert.expirationDate || ''],
        credentialId: [cert.credentialId || ''],
        verificationUrl: [cert.verificationUrl || '']
      }));
    });
  }

  populateTimeSlots(timeSlots: any[]) {
    const timeSlotsArray = this.availabilityForm.get('availableTimeSlots') as FormArray;
    timeSlotsArray.clear();
    timeSlots.forEach(slot => {
      timeSlotsArray.push(this.fb.group({
        day: [slot.day || ''],
        startTime: [slot.startTime || ''],
        endTime: [slot.endTime || '']
      }));
    });
  }

  // Tab management
  switchTab(index: number) {
    this.currentTab.set(index);
  }

  // Form array getters
  get expertiseArray() { return this.basicInfoForm.get('expertise') as FormArray; }
  get skillsArray() { return this.basicInfoForm.get('skills') as FormArray; }
  get specializationsArray() { return this.basicInfoForm.get('specializations') as FormArray; }
  get languagesArray() { return this.basicInfoForm.get('languages') as FormArray; }
  get mentorshipStyleArray() { return this.basicInfoForm.get('mentorshipStyle') as FormArray; }
  get connectArray() { return this.basicInfoForm.get('connect') as FormArray; }
  get educationArray() { return this.experienceForm.get('education') as FormArray; }
  get workExperienceArray() { return this.experienceForm.get('workExperience') as FormArray; }
  get achievementsArray() { return this.achievementsForm.get('achievements') as FormArray; }
  get certificationsArray() { return this.certificationsForm.get('certifications') as FormArray; }
  get timeSlotsArray() { return this.availabilityForm.get('availableTimeSlots') as FormArray; }

  // Event handlers for dropdowns
  onExpertiseSelected(value: string) {
    if (value && !this.expertiseArray.value.includes(value)) {
      this.expertiseArray.push(this.fb.control(value));
    }
  }

  onSkillSelected(value: string) {
    if (value && !this.skillsArray.value.includes(value)) {
      this.skillsArray.push(this.fb.control(value));
    }
  }

  onSpecializationSelected(value: string) {
    if (value && !this.specializationsArray.value.includes(value)) {
      this.specializationsArray.push(this.fb.control(value));
    }
  }

  onLanguageSelected(value: string) {
    if (value && !this.languagesArray.value.includes(value)) {
      this.languagesArray.push(this.fb.control(value));
    }
  }

  onMentorshipStyleSelected(value: string) {
    if (value && !this.mentorshipStyleArray.value.includes(value)) {
      this.mentorshipStyleArray.push(this.fb.control(value));
    }
  }

  removeFromArray(arrayName: string, index: number) {
    const array = this.basicInfoForm.get(arrayName) as FormArray;
    array.removeAt(index);
  }

  // Add/Remove methods for complex arrays
  addEducation() {
    const educationGroup = this.fb.group({
      degree: ['', Validators.required],
      institution: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: [''],
      description: ['']
    });
    this.educationArray.push(educationGroup);
  }

  removeEducation(index: number) {
    if (this.educationArray.length > 0) {
      this.educationArray.removeAt(index);
    }
  }

  addWorkExperience() {
    const workGroup = this.fb.group({
      jobTitle: ['', Validators.required],
      company: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: [''],
      description: ['']
    });
    this.workExperienceArray.push(workGroup);
  }

  removeWorkExperience(index: number) {
    if (this.workExperienceArray.length > 0) {
      this.workExperienceArray.removeAt(index);
    }
  }

  addAchievement() {
    const achievementGroup = this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      date: ['', Validators.required]
    });
    this.achievementsArray.push(achievementGroup);
  }

  removeAchievement(index: number) {
    if (this.achievementsArray.length > 0) {
      this.achievementsArray.removeAt(index);
    }
  }

  addCertification() {
    const certificationGroup = this.fb.group({
      title: ['', Validators.required],
      institution: ['', Validators.required],
      issuedDate: ['', Validators.required],
      expirationDate: [''],
      credentialId: [''],
      verificationUrl: ['']
    });
    this.certificationsArray.push(certificationGroup);
  }

  removeCertification(index: number) {
    if (this.certificationsArray.length > 0) {
      this.certificationsArray.removeAt(index);
    }
  }

  addTimeSlot() {
    const timeSlotGroup = this.fb.group({
      day: ['', Validators.required],
      startTime: ['', Validators.required],
      endTime: ['', Validators.required]
    });
    this.timeSlotsArray.push(timeSlotGroup);
  }

  removeTimeSlot(index: number) {
    if (this.timeSlotsArray.length > 0) {
      this.timeSlotsArray.removeAt(index);
    }
  }

  // File upload handling
  onFileSelected(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
      const file = input.files[0];
      
      // Validate file type
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }

      // Validate file size (5MB limit)
      if (file.size > 5 * 1024 * 1024) {
        alert('File size must be less than 5MB');
        return;
      }

      this.selectedFile = file;

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        this.profilePicturePreview = e.target?.result as string;
      };
      reader.readAsDataURL(file);
    }
  }

  removeProfilePicture() {
    this.profilePicturePreview = null;
    this.selectedFile = null;
    const fileInput = document.getElementById('profilePicture') as HTMLInputElement;
    if (fileInput) fileInput.value = '';
  }

  // Save profile
  saveProfile() {
    if (!this.currentUser) return;

    this.isSaving.set(true);

    // Collect all form data
    const profileData: Partial<Mentor> = {
      location: this.basicInfoForm.value.location,
      profilePicture: this.profilePicturePreview || '',
      overview: {
        about: this.basicInfoForm.value.about,
        expertise: this.expertiseArray.value,
        skills: this.skillsArray.value,
        specializations: this.specializationsArray.value,
        mentorshipStyle: this.mentorshipStyleArray.value,
        languages: this.languagesArray.value,
        connect: this.connectArray.value
      },
      experience: {
        education: this.educationArray.value,
        workExperience: this.workExperienceArray.value,
        achievements: this.achievementsArray.value,
        certifications: this.certificationsArray.value
      },
      availability: {
        timeZone: this.availabilityForm.value.timeZone,
        sessionTypes: [],
        availableTimeSlots: this.timeSlotsArray.value
      }
    };

    // Save to Firestore
    this.mentorService.createOrUpdateMentorProfile(profileData).pipe(
      finalize(() => this.isSaving.set(false))
    ).subscribe({
      next: () => {
        alert('Profile updated successfully!');
        this.loadUserData(); // Reload data
      },
      error: (error) => {
        console.error('Error saving profile:', error);
        alert('Error saving profile. Please try again.');
      }
    });
  }

  // Utility methods
  getUserInitials(): string {
    if (!this.currentUser) return 'U';
    const firstInitial = this.currentUser.firstName?.charAt(0) || this.currentUser.displayName?.charAt(0) || 'U';
    const lastInitial = this.currentUser.lastName?.charAt(0) || '';
    return `${firstInitial}${lastInitial}`.toUpperCase();
  }

  progressPercentage(): number {
    return ((this.currentTab() + 1) / this.tabs.length) * 100;
  }

  toggleEdit() {
    this.isEditing = !this.isEditing;
    if (!this.isEditing) {
      // Reset form if canceling
      this.initializeForm();
      this.loadUserData();
    }
  }

  onSaveProfile() {
    if (this.profileForm.valid) {
      this.isLoading = true;
      
      // Simulate API call
      setTimeout(() => {
        const formData = this.profileForm.value;
        
        // Update user data
        const updatedUser = {
          ...this.user,
          ...formData,
          interests: this.selectedInterests,
          hobbies: this.selectedHobbies,
          ...(this.user.userType === 'mentor' && {
            skills: this.selectedSkills,
            expertiseFields: this.selectedExpertiseFields
          })
        };

        console.log('Profile updated:', updatedUser);
        this.isLoading = false;
        this.isEditing = false;
        
        // Emit the updated user data to parent
        this.userUpdated.emit(updatedUser);
        
        // Show success message
        alert('Profile na-update na successfully!');
      }, 1500);
    } else {
      console.log('Form is invalid');
      this.markFormGroupTouched();
    }
  }

  markFormGroupTouched() {
    Object.keys(this.profileForm.controls).forEach(key => {
      const control = this.profileForm.get(key);
      if (control) {
        control.markAsTouched();
      }
    });
  }

  onSkillToggle(skillId: string) {
    const index = this.selectedSkills.indexOf(skillId);
    if (index > -1) {
      this.selectedSkills.splice(index, 1);
    } else {
      this.selectedSkills.push(skillId);
    }
  }

  onExpertiseToggle(fieldId: string) {
    const index = this.selectedExpertiseFields.indexOf(fieldId);
    if (index > -1) {
      this.selectedExpertiseFields.splice(index, 1);
    } else {
      this.selectedExpertiseFields.push(fieldId);
    }
  }

  onInterestToggle(interest: string) {
    const index = this.selectedInterests.indexOf(interest);
    if (index > -1) {
      this.selectedInterests.splice(index, 1);
    } else {
      this.selectedInterests.push(interest);
    }
  }

  onHobbyToggle(hobby: string) {
    const index = this.selectedHobbies.indexOf(hobby);
    if (index > -1) {
      this.selectedHobbies.splice(index, 1);
    } else {
      this.selectedHobbies.push(hobby);
    }
  }

  onFileSelected(event: any) {
    const file = event.target.files[0];
    if (file) {
      // In a real app, you would upload this to a server
      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.user.avatar = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  }

  getSkillsByCategory(category: string): Skill[] {
    return this.availableSkills.filter(skill => skill.category === category);
  }

  getSkillCategories(): string[] {
    return [...new Set(this.availableSkills.map(skill => skill.category))];
  }

  getUserInitials(): string {
    return `${this.user.firstName.charAt(0)}${this.user.lastName.charAt(0)}`.toUpperCase();
  }

  getSkillName(skillId: string): string {
    const skill = this.availableSkills.find(s => s.id === skillId);
    return skill ? skill.name : '';
  }

  getExpertiseFieldName(fieldId: string): string {
    const field = this.availableExpertiseFields.find(f => f.id === fieldId);
    return field ? field.name : '';
  }

  getExpertiseFieldDescription(fieldId: string): string {
    const field = this.availableExpertiseFields.find(f => f.id === fieldId);
    return field ? field.description : '';
  }
}
